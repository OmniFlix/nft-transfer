// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/applications/nft_transfer/v1/mock_token_data.proto

package mock

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TokenMetadata struct {
	// the name of token to be transferred
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the description of token to be transferred
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// the image of token to be transferred
	Image string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	// the external_link of token to be transferred
	ExternalLink string `protobuf:"bytes,4,opt,name=external_link,json=externalLink,proto3" json:"external_link,omitempty"`
	// the seller_fee_basis_points of token to be transferred
	SellerFeeBasisPoints string `protobuf:"bytes,5,opt,name=seller_fee_basis_points,json=sellerFeeBasisPoints,proto3" json:"seller_fee_basis_points,omitempty"`
}

func (m *TokenMetadata) Reset()         { *m = TokenMetadata{} }
func (m *TokenMetadata) String() string { return proto.CompactTextString(m) }
func (*TokenMetadata) ProtoMessage()    {}
func (*TokenMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_c616a74aea0892b6, []int{0}
}
func (m *TokenMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenMetadata.Merge(m, src)
}
func (m *TokenMetadata) XXX_Size() int {
	return m.Size()
}
func (m *TokenMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_TokenMetadata proto.InternalMessageInfo

func (m *TokenMetadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TokenMetadata) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TokenMetadata) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *TokenMetadata) GetExternalLink() string {
	if m != nil {
		return m.ExternalLink
	}
	return ""
}

func (m *TokenMetadata) GetSellerFeeBasisPoints() string {
	if m != nil {
		return m.SellerFeeBasisPoints
	}
	return ""
}

func init() {
	proto.RegisterType((*TokenMetadata)(nil), "ibc.applications.nft_transfer.v1.TokenMetadata")
}

func init() {
	proto.RegisterFile("ibc/applications/nft_transfer/v1/mock_token_data.proto", fileDescriptor_c616a74aea0892b6)
}

var fileDescriptor_c616a74aea0892b6 = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xb1, 0x4a, 0x03, 0x31,
	0x18, 0xc7, 0x7b, 0xda, 0x0a, 0x46, 0xbb, 0x84, 0x82, 0x37, 0x1d, 0x45, 0x17, 0x17, 0x73, 0x14,
	0xd1, 0x07, 0xe8, 0x20, 0x0e, 0x0a, 0x22, 0x4e, 0x2e, 0xe1, 0x4b, 0xfa, 0xb5, 0x7e, 0xde, 0x5d,
	0x72, 0x24, 0x9f, 0xc5, 0xc7, 0xf0, 0x6d, 0x7c, 0x05, 0xc7, 0x8e, 0x8e, 0xd2, 0xbe, 0x88, 0x5c,
	0x8a, 0xd2, 0x2d, 0xf9, 0xff, 0xf2, 0xcb, 0xf0, 0x13, 0xd7, 0x64, 0x6c, 0x09, 0x6d, 0x5b, 0x93,
	0x05, 0x26, 0xef, 0x62, 0xe9, 0xe6, 0xac, 0x39, 0x80, 0x8b, 0x73, 0x0c, 0xe5, 0x72, 0x52, 0x36,
	0xde, 0x56, 0x9a, 0x7d, 0x85, 0x4e, 0xcf, 0x80, 0x41, 0xb5, 0xc1, 0xb3, 0x97, 0x63, 0x32, 0x56,
	0xed, 0x7a, 0x6a, 0xd7, 0x53, 0xcb, 0xc9, 0xe9, 0x67, 0x26, 0x86, 0x4f, 0x9d, 0x76, 0x8f, 0x0c,
	0x9d, 0x29, 0xa5, 0xe8, 0x3b, 0x68, 0x30, 0xcf, 0xc6, 0xd9, 0xf9, 0xe1, 0x63, 0x3a, 0xcb, 0xb1,
	0x38, 0x9a, 0x61, 0xb4, 0x81, 0xda, 0xee, 0x97, 0x7c, 0x2f, 0xa1, 0xdd, 0x49, 0x8e, 0xc4, 0x80,
	0x1a, 0x58, 0x60, 0xbe, 0x9f, 0xd8, 0xf6, 0x22, 0xcf, 0xc4, 0x10, 0xdf, 0x19, 0x83, 0x83, 0x5a,
	0xd7, 0xe4, 0xaa, 0xbc, 0x9f, 0xe8, 0xf1, 0xdf, 0x78, 0x47, 0xae, 0x92, 0x57, 0xe2, 0x24, 0x62,
	0x5d, 0x63, 0xd0, 0x73, 0x44, 0x6d, 0x20, 0x52, 0xd4, 0xad, 0x27, 0xc7, 0x31, 0x1f, 0xa4, 0xe7,
	0xa3, 0x2d, 0xbe, 0x41, 0x9c, 0x76, 0xf0, 0x21, 0xb1, 0xe9, 0xed, 0xd7, 0xba, 0xc8, 0x56, 0xeb,
	0x22, 0xfb, 0x59, 0x17, 0xd9, 0xc7, 0xa6, 0xe8, 0xad, 0x36, 0x45, 0xef, 0x7b, 0x53, 0xf4, 0x9e,
	0xd5, 0x82, 0xf8, 0xe5, 0xcd, 0x28, 0xeb, 0x9b, 0xd2, 0x10, 0xb8, 0x57, 0x42, 0xa0, 0xae, 0xd8,
	0xc5, 0x7f, 0x31, 0xc6, 0xc8, 0xe4, 0x16, 0x29, 0x9b, 0x39, 0x48, 0xb1, 0x2e, 0x7f, 0x03, 0x00,
	0x00, 0xff, 0xff, 0xec, 0x70, 0x36, 0x71, 0x66, 0x01, 0x00, 0x00,
}

func (m *TokenMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SellerFeeBasisPoints) > 0 {
		i -= len(m.SellerFeeBasisPoints)
		copy(dAtA[i:], m.SellerFeeBasisPoints)
		i = encodeVarintMockTokenData(dAtA, i, uint64(len(m.SellerFeeBasisPoints)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ExternalLink) > 0 {
		i -= len(m.ExternalLink)
		copy(dAtA[i:], m.ExternalLink)
		i = encodeVarintMockTokenData(dAtA, i, uint64(len(m.ExternalLink)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintMockTokenData(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintMockTokenData(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMockTokenData(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMockTokenData(dAtA []byte, offset int, v uint64) int {
	offset -= sovMockTokenData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TokenMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMockTokenData(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMockTokenData(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovMockTokenData(uint64(l))
	}
	l = len(m.ExternalLink)
	if l > 0 {
		n += 1 + l + sovMockTokenData(uint64(l))
	}
	l = len(m.SellerFeeBasisPoints)
	if l > 0 {
		n += 1 + l + sovMockTokenData(uint64(l))
	}
	return n
}

func sovMockTokenData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMockTokenData(x uint64) (n int) {
	return sovMockTokenData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TokenMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMockTokenData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockTokenData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMockTokenData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMockTokenData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockTokenData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMockTokenData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMockTokenData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockTokenData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMockTokenData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMockTokenData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockTokenData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMockTokenData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMockTokenData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerFeeBasisPoints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMockTokenData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMockTokenData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMockTokenData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerFeeBasisPoints = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMockTokenData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMockTokenData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMockTokenData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMockTokenData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMockTokenData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMockTokenData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMockTokenData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMockTokenData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMockTokenData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMockTokenData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMockTokenData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMockTokenData = fmt.Errorf("proto: unexpected end of group")
)
